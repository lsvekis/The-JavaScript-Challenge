function delay(ms) {
    return new Promise(resolve => setTimeout(resolve, ms));
}
async function performTask() {
    console.log("Task started");
    await delay(2000); // Wait for 2 seconds
    console.log("Task completed after a delay");
}
performTask();

async function fetchData(url) {
    try {
        const response = await fetch(url);
        const data = await response.json();
        console.log("Data retrieved:", data);
    } catch (error) {
        console.error("An error occurred:", error);
    } finally {
        console.log("Fetch attempt finished.");
    }
}
fetchData("https://api.example.com/data");

// Simulated asynchronous functions
function doFirstThing() {
    return new Promise((resolve) => {
        setTimeout(() => {
            resolve('First result');
        }, 1000);
    });
}

function doSecondThing(data) {
    return new Promise((resolve) => {
        setTimeout(() => {
            resolve(`Second result based on ${data}`);
        }, 1000);
    });
}

function doThirdThing(data) {
    return new Promise((resolve) => {
        setTimeout(() => {
            resolve(`Third result based on ${data}`);
        }, 1000);
    });
}

// Async function chaining
async function chainOperations() {
    try {
        const firstResult = await doFirstThing();
        const secondResult = await doSecondThing(firstResult);
        const finalResult = await doThirdThing(secondResult);
        console.log("Final result:", finalResult);
    } catch (error) {
        console.error("An error occurred:", error);
    }
}

chainOperations();


async function processArray(array) {
    const promises = array.map(async item => {
        await delay(1000); // Simulate a delay
        return item * 2;
    });
    const results = await Promise.all(promises);
    console.log("Processed results:", results);
}
processArray([1, 2, 3, 4]);

async function getUser(userId) {
    const response = await fetch(`https://jsonplaceholder.typicode.com/users/${userId}`);
    const user = await response.json();
    console.log("User data:", user);
}
getUser(1);
