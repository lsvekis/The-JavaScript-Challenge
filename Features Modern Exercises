const user = { name: "John", age: 30 };
// Use template literals to create a formatted string
const greeting = `Hello, my name is ${user.name} and I am ${user.age} years old.`;
console.log(greeting); // Outputs: Hello, my name is John and I am 30 years old.

const numbers = [1, 2, 3, 4, 5];
// Traditional function expression
const doubled = numbers.map(function(number) {
 return number * 2;
});
// Converted to arrow function
const doubledArrow = numbers.map(number => number * 2);
console.log(doubledArrow); // Outputs: [2, 4, 6, 8, 10]

let mutable = "I can change";
const immutable = "I cannot change";
console.log(mutable); // Outputs: I can change
console.log(immutable); // Outputs: I cannot change
mutable = "Changed value";
console.log(mutable); // Outputs: Changed value
// Uncommenting the line below will throw an error
// immutable = "Try changing"; // TypeError: Assignment to constant variable.

const person = {
    firstName: "Jane",
    lastName: "Doe",
    age: 28,
    occupation: "Engineer"
   };
   // Destructure the object
   const { firstName, lastName, age } = person;
   console.log(`${firstName} ${lastName} is ${age} years old.`); // Outputs: Jane Doe is 28 years old.
   
   async function fetchData() {
    try {
    const response = await fetch('https://jsonplaceholder.typicode.com/posts/1');
    const data = await response.json();
    console.log(data);
    } catch (error) {
    console.error("Error fetching data:", error);
    }
   }
   fetchData();
   
